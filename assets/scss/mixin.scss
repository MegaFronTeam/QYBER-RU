@use 'sass:map';
@use 'sass:math';

@mixin media-breakpoint-up($mediaBreakpoint) {
  @each $key, $val in $grid-breakpoints {
    @if $mediaBreakpoint == $key {
      @media screen and (min-width: $val) {
        @content;
      }
    }
  }
}

@mixin mt($s: '.36s') {
  --s: #{$s};
  transition: all var(--s) ease-in-out;
}

@function rem($pxval) {
  @if $output-bourbon-deprecation-warnings == true {
    @warn "[Bourbon] [Deprecation] `rem` is deprecated and will be " +
    "removed in 5.0.0.";
  }

  $user-deprecation-warnings-setting: $output-bourbon-deprecation-warnings;
  $output-bourbon-deprecation-warnings: false !global;

  @if not unitless($pxval) {
    $pxval: strip-units($pxval);
  }

  $base: $em-base;
  @if not unitless($base) {
    $base: strip-units($base);
  }

  $output-bourbon-deprecation-warnings: $user-deprecation-warnings-setting !global;

  @return math.div($pxval, $base) * 1rem;
}

@mixin gut($a: $grid-gutter-width, $b: 0) {
  --gutter-x: 6px;
  --gutter-y: #{$b};

  @include media-breakpoint-up(md) {
    --gutter-x: #{$a};
  }
}

@mixin roww($a: $grid-gutter-width, $b: 0, $m: p) {
  @include gut($a, $b);

  margin-top: calc(-1 * var(--gutter-y));
  margin-left: calc(-1 * var(--gutter-x) / 2);
  margin-right: calc(-1 * var(--gutter-x) / 2);

  > * {
    margin-top: calc(var(--gutter-y));
    @if $m==m {
      margin-left: calc(var(--gutter-x) / 2);
      margin-right: calc(var(--gutter-x) / 2);
    } @else {
      padding-left: calc(var(--gutter-x) / 2);
      padding-right: calc(var(--gutter-x) / 2);
    }
  }
}

@mixin a-cent($xy: xy) {
  position: absolute;

  @if $xy==xy {
    margin: auto;
    inset: 0;
  } @else if $xy==x {
    left: 0;
    right: 0;
    margin-left: auto;
    margin-right: auto;
  } @else if $xy==y {
    top: 0;
    bottom: 0;
    margin-top: auto;
    margin-bottom: auto;
  }
}

@mixin ratio($w: 1, $h: 1) {
  display: block;
  position: relative;
  --ratio: #{$h}/#{$w};
  aspect-ratio: var(--ratio);
}
